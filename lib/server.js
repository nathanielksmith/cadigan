// Generated by CoffeeScript 1.3.3
(function() {
  var app, async, cadigan, consolidate, ensure_auth, express, hash, mkfeed, update_feed, wmd;

  async = require('async');

  express = require('express');

  hash = require('node_hash');

  consolidate = require('consolidate');

  wmd = require('wmd');

  cadigan = require('../lib/cadigan');

  app = express();

  app.use(express.bodyParser());

  app.use(express["static"]("" + __dirname + "/../front"));

  app.use(express.favicon());

  app.engine('.html', function(str) {
    return str;
  });

  app.engine('.xml', consolidate.mustache);

  app.set('views', "" + __dirname + "/../front");

  ensure_auth = function(req, res, next) {
    return cadigan.init(function(err) {
      return cadigan.store.get('auth', function(err, doc) {
        if (doc.username === req.body.username && doc.password === req.body.password) {
          return next();
        } else {
          return res.send(403);
        }
      });
    });
  };

  app.get('/', function(req, res) {
    return res.render('index.html');
  });

  mkfeed = function(cb) {
    var datefmt, domain, port, updated, year;
    datefmt = function(ts) {
      return String(new Date(ts * 1000));
    };
    domain = app.get('domain');
    port = app.get('port');
    if (port && port !== 80) {
      domain = "" + domain + ":" + port;
    }
    updated = String(new Date());
    year = (new Date()).getYear() + 1900;
    return async.series({
      init: cadigan.init,
      meta: cadigan.meta,
      posts: cadigan.list
    }, function(err, result) {
      var context, posts;
      posts = result.posts.sort(function(a, b) {
        return -(a.created - b.created);
      }).filter(function(x) {
        return x.published;
      }).map(function(x) {
        x.content = wmd(x.content).html;
        x.domain = domain;
        x.created = datefmt(x.created);
        x.updated = datefmt(x.updated);
        x.year = year;
        return x;
      });
      context = {
        name: result.meta.site_name,
        posts: posts,
        domain: domain,
        author: result.meta.author_name || 'cadigan user',
        updated: updated,
        year: year
      };
      return app.render('feed.xml', context, cb);
    });
  };

  update_feed = function() {
    return mkfeed(function(err, xml) {
      return app.set('feed', xml);
    });
  };

  app.get('/feed', function(req, res) {
    if (app.get('feed')) {
      return res.send(app.get('feed'));
    } else {
      return mkfeed(function(err, xml) {
        if (err) {
          console.error(err);
        }
        res.send(err ? 500 : xml);
        return app.set('feed', xml);
      });
    }
  });

  app.post('/api/check-auth', function(req, res) {
    var password, username;
    username = req.body.username;
    password = req.body.password;
    return cadigan.init(function(err) {
      return cadigan.store.get('auth', function(err, doc) {
        if (err) {
          console.error(err);
          return res.send(500);
        }
        if (username !== doc.username || password !== doc.password) {
          return res.send(400);
        } else {
          return res.send({
            username: username,
            password: password
          });
        }
      });
    });
  });

  app.get('/api/meta', function(req, res) {
    return cadigan.init(function(err) {
      return cadigan.meta(function(err, meta) {
        return res.send(err ? 500 : meta);
      });
    });
  });

  app.get('/api/post', function(req, res) {
    return cadigan.init(function(err) {
      return cadigan.get_post(req.body.post_id, function(err, doc) {
        return res.send(err ? 500 : doc);
      });
    });
  });

  app.get('/api/search', function(req, res) {
    return cadigan.init(function(err) {
      return cadigan.search(req.keyword, function(err, docs) {
        return res.send(err ? 500 : docs);
      });
    });
  });

  app.get('/api/posts', function(req, res) {
    return cadigan.init(function(err) {
      if (err) {
        res.send(500);
      }
      return cadigan.list(function(err, posts) {
        return res.send(posts);
      });
    });
  });

  app["delete"]('/api/post', ensure_auth, function(req, res) {
    console.log(req.body);
    return cadigan.init(function(err) {
      return cadigan["delete"](req.body.post_id, function(err) {
        res.send(err ? 500 : 200);
        return update_feed();
      });
    });
  });

  app.post('/api/post', ensure_auth, function(req, res) {
    console.log(req.body);
    return cadigan.init(function(err) {
      var post;
      post = {
        title: req.body.title,
        tags: req.body.tags,
        content: req.body.content
      };
      return cadigan["new"](post, function(err, post) {
        res.send(err ? 500 : post);
        return update_feed();
      });
    });
  });

  app.post('/api/publish', ensure_auth, function(req, res) {
    console.log(req.body);
    return cadigan.init(function(err) {
      return cadigan.publish(req.body.post_id, function(err) {
        res.send(err ? 500 : 200);
        return update_feed();
      });
    });
  });

  app.post('/api/unpublish', ensure_auth, function(req, res) {
    console.log(req.body);
    return cadigan.init(function(err) {
      return cadigan.unpublish(req.body.post_id, function(err) {
        res.send(err ? 500 : 200);
        return update_feed();
      });
    });
  });

  app.post('/api/update', ensure_auth, function(req, res) {
    console.log(req.body);
    return cadigan.init(function(err) {
      return cadigan.update(req.body.post_id, req.body.newness, function(err) {
        res.send(err ? 500 : 200);
        return update_feed();
      });
    });
  });

  exports.start = function(hostname, port, cb) {
    if (err) {
      return cb(err);
    }
    hostname = hostname || 'localhost';
    port = port || 3000;
    app.set('domain', hostname);
    app.set('port', port);
    app.listen(port, hostname);
    console.log("cadigan listening at " + hostname + ":" + port);
    return cb(null);
  };

}).call(this);
