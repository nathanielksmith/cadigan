// Generated by CoffeeScript 1.3.3
  var cadigan, ds, fs, _;

  fs = require('fs');

  _ = require('underscore');

  ds = require('docstore');
(function() {
  cadigan = {
    init: function(cb) {
      var _this = this;
      this.cadigan_path = "" + process.env['HOME'] + "/.cadigan";
      this.docstore_path = "" + this.cadigan_path + "/docstore";
      if (!fs.existsSync(this.cadigan_path)) {
        fs.mkdirSync(this.cadigan_path);
      }
      if (!fs.existsSync(this.docstore_path)) {
        fs.mkdirSync(this.docstore_path);
      }
      return ds.open(this.docstore_path, function(err, store) {
        if (err) {return cb(err)}
        _this.store = store;
        return cb(null, _this);
      });
    },
    now: function() {
      return Date.now() / 1000;
    },
    meta: function(cb) {
      return this.store.get('meta', cb);
    },
    "new": function(post, cb) {
      var _this = this;
      var post_clone = _.clone(post)
      post_clone.created = this.now();
      post_clone.updated = this.now();
      return this.store.save(post_clone, function(err, doc) {
        if (err) {
          return cb(err);
        }
        post.created = doc.created
        post.updated = doc.updated
        post._id = doc._id
        return cb(null, doc);
      });
    },
    get: function(post_id, cb) {
      return this.store.get(post_id, cb);
    },
    publish: function(post_id, cb) {
      var _this = this;
      return this.store.get(post_id, function(err, doc) {
        if (err) {
          return cb(err);
        }
        doc.published = true;
        return _this.store.save(doc, function(err, doc) {
          if (err) {
            return cb(err);
          }
          return cb(null, doc);
        });
      });
    },
    unpublish: function(post_id, cb) {
      var _this = this;
      return this.store.get(post_id, function(err, doc) {
        if (err) {
          return cb(err);
        }
        doc.published = false;
        return _this.store.save(doc, function(err, doc) {
          if (err) {
            return cb(err);
          }
          return cb(null, doc);
        });
      });
    },
    update: function(post_id, newness, cb) {
      var _this = this;
      return this.store.get(post_id, function(err, doc) {
        if (err) {
          return cb(err);
        }
        doc.updated = _this.now();
        _.extend(doc, newness);
        return _this.store.save(doc, function(err, doc) {
          if (err) {
            return cb(err);
          }
          return cb(null, doc);
        });
      });
    },
    "delete": function(post_id, cb) {
      return this.store.remove(post_id, cb);
    },
    search: function(keyword, cb) {
      var filter;
      filter = function(doc) {
        var check, reductor;
        if (doc._id === 'auth' || doc._id === 'meta') {
          return false;
        }
        check = [doc.title, doc.content];
        if (doc.tags) {
          check = check.concat(doc.tags);
        }
        reductor = function(p, c) {
          if (c) {
            return p || c.match(keyword);
          } else {
            return false;
          }
        };
        return check.reduce(reductor, false);
      };
      return this.store.scan(filter, cb);
    },
    list: function(cb) {
      return this.store.scan(function(doc) {
        return doc._id !== 'auth' && doc._id !== 'meta';
      }, cb);
    }
  };

  module.exports = cadigan;

}).call(this);
