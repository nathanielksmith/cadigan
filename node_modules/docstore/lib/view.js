var fs = require('fs');
var path = require('path');
var events = require('events');

exports.open = function(dir, store, fn, options, callback) {
  if (!callback) {
    callback = options;
    options = null;
  }

  fs.stat(dir, function(err, stat) {
    err ? fs.mkdir(dir, onMkdir) : onStatSuccess();

    function onMkdir(err) {
      if (err) {
        return callback(err, dir);
      } else {
        onOpen(dir, store, fn, options, callback);
      }
    }

    function onStatSuccess() {
      if (stat.isDirectory()) {
        onOpen(dir, store, fn, options, callback);
      } else {
        var error = new Error(dir + ' is not a directory');
        return callback(error, dir);
      }
    }
  });
};

function onOpen(dir, store, fn, options, callback) {
  var view = new View(dir, store, fn, options);
  callback(undefined, view);
}

function View(dir, store, fn, options) {
  this.dir = dir;
  this.store = store;
  this.options = options;
  this.store.on('save', onSave);
  this.store.on('remove', onRemove);

  function onSave(err, obj) {
    if (err) {
      return;
    }
    if (fn(obj)) {
      var symlink = path.join(dir, obj._id + store.format.extension);
      fs.readlink(symlink, function(err) {
        if (err) {
          var dest = store.resolvePath(obj._id);
          fs.symlink(dest, symlink, function(err) {
            if (err) {
              // TODO: Do something better with this error
              console.error(err);
            }
          });
        }
      });
    } else {
      fs.readlink(symlink, function(err) {
        if (!err) {
          onRemove(null, obj._id);
        }
      })
    }
  }

  function onRemove(err, id) {
    if (err) {
      return;
    }
    var symlink = path.join(dir, obj._id + store.format.extension);
    fs.unlink(symlink, function(err) {
      if (err) {
        // TODO: Do something better with this error
        console.error(err);
      }
    });
  }
}

