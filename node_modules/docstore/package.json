{
  "author": {
    "name": "Jeff Kunkle",
    "email": "jeff.kunkle@nearinfinity.com"
  },
  "name": "docstore",
  "description": "Simple and extendable JSON document storage and retrieval",
  "keywords": [
    "json",
    "database",
    "nosql",
    "couch",
    "couchdb"
  ],
  "version": "0.1.1",
  "bugs": {
    "url": "https://github.com/nearinfinity/node-docstore/issues"
  },
  "license": "MIT",
  "main": "./lib/docstore.js",
  "repository": {
    "type": "git",
    "url": "https://github.com/nearinfinity/node-docstore.git"
  },
  "scripts": {
    "test": "mocha"
  },
  "engines": {
    "node": ">=0.6.0"
  },
  "dependencies": {
    "async": "0.1.18"
  },
  "devDependencies": {
    "chai": "~0.5.1",
    "mocha": "~1.0.0"
  },
  "readme": "# docstore\n\nSimple and extendable JSON document storage and retrieval\n\n## Installation\n\n    $ npm install docstore\n\n## Usage\n\n```javascript\nvar ds = require('docstore');\n\nds.open('./docs/users', function(err, store) {\n  assert(err == null);\n\n  store.save({ name: 'Joe', age: 35 }, function(err, doc) {\n    assert(err == null);\n    console.log(doc._id); // ids are autogenerated and assigned\n  });\n\n  // See below for other methods available on store\n});\n```\n\n## Opening\n\nThe first step to using docstore is to open a store. All other\noperations are available from the store returned to you via the passed\ncallback.\n\n### open(directory, options, callback)\n\n__Arguments__\n\n* directory - the directory to read and write documents to/from\n* options - an object containing store options (see below)\n* callback(err, store) - callback that will be invoked after opening the\n  store\n\n__Events__\n\n* open(err, store) - event emitted when a store is successfully opened\n* open(err, docdir) - event emitted when opening a store fails\n\n__Example__\n\n```javascript\nvar ds = require('docstore');\n\nds.open('./docs/users', function(err, store) {\n  assert(err == null);\n  assert(store != null);\n});\n```\n\n__options__\n\nThe following options are available when opening a store\n\n* format - the format class to use for serializing and deserializing\n  objects. It defaults to the JSON formatter in lib/format/json.js\n* idgen - custom function for generting object ids. It defaults to the\n  generator in lib/idgen.js\n\n## Saving\n\nWhen saving, the store uses the configured format implementation to\nfirst serialize the object. If the object has a `_id` property it's\nvalue will be used as the filename. Otherwise, a random filename will be\ngenerated.\n\n### store.save(obj, callback)\n\n__Arguments__\n\n* obj - the object to save\n* callback(err, obj) - callback that will be invoked after opening the\n  store. It is passed an error if one occurs. If no error occurs it will\n  pass the object as saved (with it's generated id).\n\n__Events__\n\n* save(err, object) - event emitted when an object is saved, error or not\n\n__Example__\n\n```javascript\nstore.save({ name: 'Joe', age: 35 }, function(err, doc) {\n  assert(err == null);\n  console.log(doc._id); // ids are autogenerated and assigned\n});\n```\n\n## Retrieving\n\nAny document can be retrieved given its id.\n\n### store.get(id, callback)\n\n__Arguments__\n\n* id - the id of the object to get\n* callback(err, obj) - callback that will be invoked after retrieving the\n  document. It is passed an error if one occurs. If no error occurs it will\n  pass the document.\n\n__Events__\n\n* get(err, object) - event emitted when an object is successfully retrieved\n* get(err, id) - event emitted when an object retrieval fails\n\n__Example__\n\n```javascript\nstore.get('id12302202', function(err, doc) {\n  assert(err == null);\n  assert(doc._id === 'id12302202');\n});\n```\n\n## Removing\n\nThere are two methods for removing documents. You can remove them one at\na time or clear all documents from a store at once.\n\n### store.remove(id, callback)\n\n__Arguments__\n\n* id - the id of the object to remove\n* callback(err) - callback that will be invoked after removing the\n  document. It is passed an error if one occurs.\n\n__Events__\n\n* remove(err, id) - event emitted when an object is removed, regardless\n  of failure or success\n\n__Example__\n\n```javascript\nstore.remove('id12302202', function(err) {\n  assert(err == null);\n  console.log('Deleted');\n});\n```\n\n### store.clear(callback)\n\n__Arguments__\n\n* callback(err) - callback that will be invoked after removing all\n  documents. It is passed an error if one occurs.\n\n__Example__\n\n```javascript\nstore.clear(function(err) {\n  assert(err == null);\n  console.log('All deleted');\n});\n```\n\n## Scanning\n\nScanning is the method used to find particular documents among a large\ncollection. While there's only one scan method, it can be used in two\nways. You can either get a single callback with all the results as an\narray or get them as a stream of document events.\n\n### store.clear(callback)\n\n__Arguments__\n\n* filter - a function to be used to determine if a document should be\n  returned from the scan\n* callback(err) - optional callback that will be invoked for all\n  documents that have passed the filter function. If no callback is\n  passed to the scan method, an `EventEmitter` is returned instead. It\n  emits `document` events for all documents passing the filter function,\n  an `error` event if any errors occur, and an `end` event when scanning\n  is finished.\n\n__Examples__\n\n```javascript\nvar filter = function(doc) {\n  return doc._id === 'id12302202';\n};\n\n// get all results at once\nstore.scan(filter, function(err, docs) {\n  assert(err == null);\n  assert(docs.length === 1);\n  assert(docs[0]._id === 'id12302202');\n});\n\n// get results as a stream\nvar stream = store.scan(filter);\nstream.on('document', function(doc) {\n  assert(doc._id === 'id12302202');\n});\nstream.on('end', console.log.bind(null, 'Done'));\nstream.on('error', console.error.bind(null));\n```\n\n## Custom Formats\n\nAs mentioned above, the `docstore.open` function accepts an options\nobject, one option of which is `format`. A format object is used by the\nstore to serialize an object before writing it to disk and deserializing\nit after reading from disk. It's up to you to decide how it should be\nrepresented on disk. A default JSON formatter is used if you don't\nspecify one. It stores documentas as plain text JSON.\n\nWriting your own custom format is easy, requiring only one property to\nbe present and two methods to be implemented.\n\n### extension\n\n`extension` is a property used to indicate the file extension to use for\nyour format. It should include a leading `.`, such as `.json` for JSON\nformatted files.\n\n### serialize(obj)\n\nThe serialize method is called to format a JavaScript object as it is to\nbe represented on disk. It must return the serialized form of the\nobject.\n\n### deserialize(buffer)\n\nThe deserialize method is called to format a buffer read from disk back\ninto its JavaScript object form. It must return a JavaScript object.\n\n__Example Format__\n\n```javascript\nexports.extension = '.json';\n\nexports.serialize = function (obj) {\n  return JSON.stringify(obj);\n};\n\nexports.deserialize = function (buffer) {\n  return JSON.parse(buffer);\n};\n```\n\n## Encryption\n\n`docstore` includes a format object that can be used to encrypt the\nfiles stored on disk. It simply wraps another format object in an\nencrypted form. While it's intended to be able to transparently encrypt\nany underlying format, it's only been tested with the default JSON\nformat.\n\n### constructor(algorithm, password, underlyingFormat)\n\n__Arguments__\n\n* algorithm - the encryption algorithm to use. The available algorithms\n  is dependent on your version of OpenSSL. On recent releases,\n  `openssl list-cipher-algorithms` will display the available cipher\n  algorithms.\n* password - used to derive id and initialization vector (IV)\n* underlyingFormat - the underling format for serializing and\n  deserializing JavaScript objects. If no underlying format is given the\n  default JSON format implementation will be used.\n\n__Example__\n\n```javascript\nvar ds = require('docstore');\nvar Encrypted = require('docstore/lib/format/encrypted');\nvar encrypted = new Encrypted('aes128', 'password');\n\nds.open('./docs/users', { format: encrypted }, function(err, store) {\n  console.log('You now have an encrypted store');\n});\n```\n\n## License\n\n(The MIT License)\n\nCopyright (c) 2012 Near Infinity Corporation\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n",
  "_id": "docstore@0.1.1",
  "dist": {
    "shasum": "d129f4e7de6e4b8fa40c98f88d90178a8a33c2a5"
  },
  "_from": "docstore"
}
