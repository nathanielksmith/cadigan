{
  "name": "akeley",
  "version": "0.5.0",
  "author": {
    "name": "nathaniel k smith",
    "email": "nathanielksmith@gmail.com"
  },
  "description": "a mocking utility library",
  "main": "./lib/akeley",
  "repository": {
    "type": "git",
    "url": "https://github.com/nathanielksmith/akeley.git"
  },
  "scripts": {
    "test": "nodeunit ./tests"
  },
  "keywords": [
    "mock",
    "testing"
  ],
  "dependencies": {},
  "license": "BSD",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# akeley\n\n_being a mocking utility_\n\n## mock something out\n\n        var m = require('akeley');\n\n        var mock_akeley = m.create_mock({\n            name: 'Henry Akeley',\n            profession: 'Antiquarian',\n            vitals: {\n                age: 63,\n                height: \"5'0\",\n                weight: \"160\"\n            },\n            thoughts:[],\n            speak: function() {\n                console.log('hello');\n            },\n            think: function(thought) {\n                this.thoughts.push(thought);\n            }\n        });\n\n        mock_akeley.speak();\n        mock_akeley.think('i hate the mi-go');\n        mock_akeley.think('i love the mi-go');\n\n        mock_akeley.speak.called; // true\n        mock_akeley.speak.calls; // 1\n        mock_akeley.speak.args; // [ [] ]\n\n        mock_akeley.think.called; // true\n        mock_akeley.think.calls; // 2\n        mock_akeley.think.args; // [ ['i hate the mi-go'], ['i love the mi-go'] ]\n\n        mock_akeley.think.reset(); // reset called, calls, args\n\n        // Does right thing when fed a function\n        var _ = require('underscore'); // for example\n        var mock_ = m.create_mock(_);\n        mock_();\n        mock_.called // true\n        mock_.bind // set to a mock function\n\n        // tweak its behavior\n        mock_.return_value = 'azathoth';\n        mock_(); // 'azathoth'\n\n\n## just make a watched function\n\n        // set a return value\n        var mockf = m.create_func({return_value:5});\n        mockf(): // 5\n        mockf.called // true\n\n        // wrap a real function\n        var mockf = Mock.create_func({\n            func: some_useful_real_func\n        });\n\n        // cause side effects\n        var mockf = Mock.create_func({\n            side_effect: function() { throw 'error' }\n        });\n\n\n## create a nested structure\n\n        var nested = m.create_nested_obj({}, ['hi', 'there', 'how', 'are', 'you']);\n        nested.hi.there.how.are.you = 'hi';\n\n## changelog\n\n0.5.0\n\n * totally change API so mocking Functions as objects works\n * support altering return\\_value and friends as properties\n * update tests\n\n0.4.0\n\n * add 'reset' feature\n\n< 0.3.0\n\n * who even knows\n\n## author\n\nnathaniel k smith <nathanielksmith@gmail.com>\n\n## license\n\nBSD\n",
  "_id": "akeley@0.5.0",
  "dist": {
    "shasum": "1353526f6f3cff9d5afa0798dc7282814f63a60f"
  },
  "_from": "akeley"
}
